{"version":3,"sources":["fBase.js","components/AuthForm.js","routes/Auth.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebaseInstance","firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","error","setError","email","setEmail","password","setPassword","newAccount","setNewAccount","onValueChanged","event","target","name","value","onFormSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","data","console","log","message","onSubmit","type","placeholder","required","onChange","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Nweet","nweetObj","isOwner","isEditing","setIsEditing","text","newNweet","setNewNweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentURL","toggleEditing","onSubmitHandler","e","update","src","width","height","alt","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","Home","nweets","setNweets","useEffect","onSnapshot","snapshot","nweetArray","docs","map","Navigation","to","displayName","Profile","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","signOut","push","AppRouter","isLoggedIn","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","className","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAiBaA,G,kBAFEC,IAASC,cAVD,CACnBC,OAAQC,0CACRC,WAAYD,gCACZE,UAAWF,gBACXG,cAAeH,4BACfI,kBAAmBJ,eACnBK,MAAOL,8CAMqBH,KAEnBS,EAAcT,IAASU,OACvBC,EAAYX,IAASY,YACrBC,EAAiBb,IAASc,UCkDxBC,EApEE,WAAM,MAEKC,mBAAS,IAFd,mBAEdC,EAFc,KAEPC,EAFO,OAGKF,mBAAS,IAHd,mBAGdG,EAHc,KAGPC,EAHO,OAIWJ,mBAAS,IAJpB,mBAIdK,EAJc,KAIJC,EAJI,OAKeN,oBAAS,GALxB,mBAKdO,EALc,KAKFC,EALE,KAOfC,EAAiB,SAACC,GAAW,IAAD,EAG5BA,EADFC,OAAUC,EAFoB,EAEpBA,KAAMC,EAFc,EAEdA,MAGL,UAATD,EACFR,EAASS,GACS,aAATD,GACTN,EAAYO,IAKVC,EAAY,uCAAG,WAAOJ,GAAP,eAAAK,EAAA,yDACnBL,EAAMM,iBADa,UAGJT,EAHI,gCAIPd,EAAYwB,+BAA+Bd,EAAOE,GAJ3C,2DAKPZ,EAAYyB,2BAA2Bf,EAAOE,GALvC,4BAGXc,EAHW,KAMjBC,QAAQC,IAAIF,GANK,kDAQjBjB,EAAS,KAAMoB,SARE,0DAAH,sDAelB,OACE,qCACE,uBAAMC,SAAUT,EAAhB,UACE,uBACEF,KAAK,QACLY,KAAK,QACLC,YAAY,QACZC,UAAQ,EACRb,MAAOV,EACPwB,SAAUlB,IAEZ,uBACEG,KAAK,WACLY,KAAK,WACLC,YAAY,WACZC,UAAQ,EACRb,MAAOR,EACPsB,SAAUlB,IAEZ,uBACEe,KAAK,SACLX,MAAON,EAAa,qBAAuB,cAI/C,sBAAMqB,QA3BY,kBAAMpB,GAAc,SAACqB,GAAD,OAAWA,MA2BjD,SACGtB,EAAa,UAAY,uBAE3BN,MCrCQ6B,EAzBF,WAEX,IAAMC,EAAa,uCAAG,WAAMrB,GAAN,mBAAAK,EAAA,4DAIR,YAHIH,EAASF,EAAlBC,OAASC,MAIdoB,EAAW,IAAIjD,EAAiBW,KAAKuC,mBACpB,WAATrB,IACRoB,EAAW,IAAIjD,EAAiBW,KAAKwC,oBAPnB,SASDzC,EAAY0C,gBAAgBH,GAT3B,OASdb,EATc,OAUpBC,QAAQC,IAAIF,GAVQ,2CAAH,sDAanB,OACE,gCACE,cAAC,EAAD,IACA,gCACE,wBAAQS,QAASG,EAAenB,KAAK,SAArC,4EACA,wBAAQgB,QAASG,EAAenB,KAAK,SAArC,mF,QCiDOwB,MAtEf,YAAuC,IAAtBC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,QAAW,EACFtC,oBAAS,GADP,mBAC7BuC,EAD6B,KAClBC,EADkB,OAEJxC,mBAASqC,EAASI,MAFd,mBAE7BC,EAF6B,KAEnBC,EAFmB,KAI9BC,EAAa,uCAAG,sBAAA7B,EAAA,0DACT8B,OAAOC,QAAQ,kEADN,gCAGZnD,EAAUoD,IAAV,iBAAwBV,EAASW,KAAMC,SAH3B,uBAIZpD,EAAeqD,WAAWb,EAASc,eAAeF,SAJtC,2CAAH,qDAQbG,EAAgB,WACpBZ,GAAa,SAACX,GAAD,OAAWA,MAUpBwB,EAAe,uCAAG,WAAMC,GAAN,SAAAvC,EAAA,6DACtBuC,EAAEtC,iBADoB,SAEhBrB,EAAUoD,IAAV,iBAAwBV,EAASW,KAAMO,OAAO,CAClDd,KAAMC,IAHc,OAKtBF,GAAa,GALS,2CAAH,sDAQrB,OACE,8BACGD,EACC,mCACGD,GACC,qCACE,uBAAMf,SAAU8B,EAAhB,UACE,uBACE7B,KAAK,OACLG,SAxBK,SAACjB,GAAW,IAEnBG,EACRH,EADFC,OAAUE,MAEZ8B,EAAY9B,IAqBEa,UAAQ,EACRD,YAAY,iEACZZ,MAAO6B,IAET,uBAAOlB,KAAK,SAASX,MAAM,yBAE7B,wBAAQe,QAASwB,EAAjB,0BAA4C,SAKlD,qCACG,IACD,6BAAKf,EAASI,OACbJ,EAASc,eACR,qBAAKK,IAAKnB,EAASc,cAAeM,MAAM,OAAOC,OAAO,OAAOC,IAAI,eAElErB,GACC,qCACE,wBAAQV,QAASgB,EAAjB,oBACA,wBAAQhB,QAASwB,EAAjB,2B,QCsBCQ,MAlFf,YAAoC,IAAZC,EAAW,EAAXA,QAAW,EACL7D,mBAAS,IADJ,mBACxB8D,EADwB,KACjBC,EADiB,OAEK/D,mBAAS,IAFd,mBAExBgE,EAFwB,KAEZC,EAFY,KAI3BZ,EAAe,uCAAG,WAAO3C,GAAP,qBAAAK,EAAA,yDACtBL,EAAMM,iBACFmC,EAAgB,GAED,KAAfa,EAJkB,wBAMdE,EAAgBrE,EACnBsE,MACAC,MAFmB,UAEVP,EAAQQ,IAFE,YAEKC,gBARP,SASGJ,EAAcK,UAAUP,EAAY,YATvC,cASdQ,EATc,gBAUEA,EAASL,IAAIM,iBAVf,OAUpBtB,EAVoB,sBAahBd,EAAW,CACfI,KAAMqB,EACNY,UAAWC,KAAKC,MAChBC,UAAWhB,EAAQQ,IACnBlB,iBAjBoB,UAmBhBxD,EAAUmF,WAAW,UAAUC,IAAI1C,GAnBnB,QAqBtB0B,EAAS,IACTE,EAAc,IAtBQ,4CAAH,sDAyDrB,OACE,uBAAM1C,SAAU8B,EAAhB,UACE,uBACE7B,KAAK,OACLX,MAAOiD,EACPnC,SArCe,SAACjB,GAAW,IAEnBG,EACRH,EADFC,OAAUE,MAEZkD,EAASlD,IAkCLY,YAAY,yBAEd,uBAAOD,KAAK,OAAOwD,OAAO,UAAUrD,SAjCnB,SAACjB,GAAW,IAIzBuE,EADFvE,EADFC,OAAUuE,MAEU,GAChBC,EAAS,IAAIC,WAEnBD,EAAOE,UAAY,SAACC,GAAmB,IAElBC,EACfD,EADFE,cAAiBD,OAEnBtB,EAAcsB,IAMdJ,EAAOM,cAAcR,MAiBrB,uBAAOzD,KAAK,SAASX,MAAM,UAC1BmD,GACC,gCACE,qBAAKR,IAAKQ,EAAYP,MAAM,OAAOC,OAAO,OAAOC,IAAI,eACrD,wBAAQ/B,QAjBU,WACxBqC,EAAc,OAgBR,0BC5BKyB,EA5CF,SAAC,GAAiB,IAAf7B,EAAc,EAAdA,QAAc,EACA7D,mBAAS,IADT,mBACrB2F,EADqB,KACbC,EADa,KA6B5B,OAbAC,qBAAU,WAERlG,EAAUmF,WAAW,UAAUgB,YAAW,SAACC,GACzC,IAAMC,EAAaD,EAASE,KAAKC,KAAI,SAACnD,GAAD,oBAEnCC,GAAID,EAAIC,IACLD,EAAI5B,WAETyE,EAAUI,QAEX,IAIC,gCACE,cAAC,EAAD,CAAcnC,QAASA,IACtB8B,EAAOO,KAAI,SAACpC,GACX,OACE,cAAC,EAAD,CAEEzB,SAAUyB,EACVxB,QAASwB,EAAMe,YAAchB,EAAQQ,KAFhCP,EAAMd,WCtBVmD,MAhBf,YAAkC,IAAZtC,EAAW,EAAXA,QAElB,OADJzC,QAAQC,IAAIwC,GAEJ,8BACI,+BACI,6BACI,cAAC,IAAD,CAAMuC,GAAG,IAAT,oBAEJ,6BACI,eAAC,IAAD,CAAMA,GAAG,WAAT,UAAqBvC,EAAQwC,YAA7B,sBC+CLC,EAvDC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,YAAa1C,EAAc,EAAdA,QACxB2C,EAAUC,cAD4B,EAEAzG,mBAAS6D,EAAQwC,aAFjB,mBAErCK,EAFqC,KAErBC,EAFqB,KA8BtCtD,EAAe,uCAAG,WAAM3C,GAAN,SAAAK,EAAA,yDACpBL,EAAMM,iBACH6C,EAAQwC,cAAgBK,EAFP,gCAGZ7C,EAAQ+C,cAAc,CACxBP,YAAaK,IAJC,OAMlBH,IANkB,2CAAH,sDASrB,OACE,qCACE,uBAAMhF,SAAU8B,EAAhB,UACE,uBACE7B,KAAK,OACLC,YAAY,oBACZC,UAAQ,EACRb,MAAO6F,EACP/E,SAxBa,SAACjB,GAAW,IAEnBG,EACRH,EADFC,OAAUE,MAEZ8F,EAAkB9F,MAsBd,uBAAOW,KAAK,SAASX,MAAM,mBAE7B,wBAAQe,QA9CW,WACrBnC,EAAYoH,UACZL,EAAQM,KAAK,MA4CX,0BCtBSC,EA1BG,SAAC,GAA0C,IAAxCR,EAAuC,EAAvCA,YAAaS,EAA0B,EAA1BA,WAAYnD,EAAc,EAAdA,QAE5C,OACE,eAAC,IAAD,WACGmD,GAAc,cAAC,EAAD,CAAYnD,QAASA,IAEpC,cAAC,IAAD,UACGmD,EACC,qCACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,CAAMrD,QAASA,MAEjB,cAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,WAAlB,SACE,cAAC,EAAD,CAASrD,QAASA,EAAS0C,YAAaA,SAI5C,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,YCsCGC,MA1Df,WAAe,MAGWnH,oBAAS,GAHpB,mBAGNoH,EAHM,KAGAC,EAHA,OAIiBrH,mBAAS,MAJ1B,mBAIN6D,EAJM,KAIGyD,EAJH,KAwCb,OAjCAzB,qBAAU,WACRpG,EAAY8H,oBAAmB,SAACC,GAE5BF,EADEE,EACS,CACTnB,YAAamB,EAAKnB,YAClBhC,IAAKmD,EAAKnD,IACVuC,cAAe,SAACa,GAAD,OAAUD,EAAKZ,cAAca,KAGnC,MAEbJ,GAAQ,QAET,IAqBD,sBAAKK,UAAU,MAAf,UACGN,EACC,cAAC,EAAD,CACEb,YAtBY,WAKlB,IAAMiB,EAAO/H,EAAYkI,YACzBL,EAAW,CACTjB,YAAamB,EAAKnB,YAClBhC,IAAKmD,EAAKnD,IACVuC,cAAe,SAACa,GAAD,OAAUD,EAAKZ,cAAca,OAcxCT,WAAYY,QAAQ/D,GACpBA,QAASA,IAGX,kBAEF,4CACU,IAAIc,MAAOkD,cADrB,qCCnDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.652dca08.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\"; \r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_API_KEY,\r\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n    appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\n// Initialize Firebase\r\nexport default firebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import React, {useState} from 'react';\r\nimport { authService } from \"fBase\";\r\n\r\nconst AuthForm = () => {\r\n  //value를 사용하기 위해 state 사용\r\n  const [error, setError] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true); //새로운 유저인지 true: 계정 생성, false: 로그인\r\n\r\n  const onValueChanged = (event) => {\r\n    const {\r\n      target: { name, value }, //target: 변경이 일어난 부분\r\n    } = event; //get name and value\r\n\r\n    if (name === \"email\") {\r\n      setEmail(value); //input의 value가 변경될 때마다 state의 값도 변한다. -> 리렌더링\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  // seetPersistance : 유저가 저장되는 방식 설정 local / session / none\r\n  const onFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const data = newAccount\r\n        ? await authService.createUserWithEmailAndPassword(email, password) // Create account\r\n        : await authService.signInWithEmailAndPassword(email, password); // Log in\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  //newAccount를 이전값과 반대인 값으로 바꿔주는 함수. true <-> false\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onFormSubmit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onValueChanged}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onValueChanged}\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create new account\" : \"Log in\"}\r\n        />\r\n      </form>\r\n      {/* 반대의 기능 사용 create new account <-> sign in */}\r\n      <span onClick={toggleAccount}>\r\n        {newAccount ? \"Sign In\" : \"Create new account\"}\r\n      </span>\r\n      {error}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default AuthForm\r\n","import React from \"react\";\r\nimport { firebaseInstance, authService } from \"fBase\";\r\nimport AuthForm from \"components/AuthForm\";\r\n\r\nconst Auth = () => {\r\n\r\n  const onSocialClick = async(event) => {\r\n    const {target: {name}} = event;\r\n    let provider;\r\n    \r\n    if(name === 'google'){\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if(name === 'github'){\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    const data = await authService.signInWithPopup(provider);\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n      <div>\r\n        <button onClick={onSocialClick} name=\"google\">Google 이메일로 로그인하기</button>\r\n        <button onClick={onSocialClick} name=\"github\">Github 이메일로 로그인하기</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { dbService, storageService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Nweet({ nweetObj, isOwner }) {\r\n  const [isEditing, setIsEditing] = useState(false); //Is editing or not\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //수정될 nweet\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete(); //id를 알고 있기 때문에 가능./\r\n      await storageService.refFromURL(nweetObj.attachmentURL).delete(); //Delete file\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setIsEditing((prev) => !prev);\r\n  };\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  const onSubmitHandler = async(e) => {\r\n    e.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmitHandler}>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={onTextChange}\r\n                  required\r\n                  placeholder=\"당신의 Nweet을 수정하세요.\"\r\n                  value={newNweet}\r\n                />\r\n                <input type=\"submit\" value=\"Nwee 수정\" />\r\n              </form>\r\n              <button onClick={toggleEditing}>취소</button>{\" \"}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          {\" \"}\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentURL && (\r\n            <img src={nweetObj.attachmentURL} width=\"50px\" height=\"50px\" alt=\"attachment\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete</button>\r\n              <button onClick={toggleEditing}>Edit</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nweet;\r\n","import React, {useState} from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"fBase\";\r\n\r\nfunction NweetFactory({ userObj }) {\r\n    const [nweet, setNweet] = useState(\"\"); //only for the form\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentURL = \"\";\r\n\r\n    if (attachment !== \"\") {\r\n      // Upload Image\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`); //child: 이미지의 path - folder\r\n      const response = await attachmentRef.putString(attachment, \"data_url\"); //.putString(data, data format)\r\n      attachmentURL = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentURL,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  }\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent; //finishedEvent.currentTarget.result 값을 ES6로 표현한 것\r\n      setAttachment(result);\r\n    };\r\n\r\n    // if (files.lenght > 0) {\r\n    //   //오류 수정 -> 파일선택하려다 취소한 경우\r\n    //   const theFile = files[0];\r\n      reader.readAsDataURL(theFile);\r\n    // }\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(null);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler}>\r\n      <input\r\n        type=\"text\"\r\n        value={nweet}\r\n        onChange={onTextChange}\r\n        placeholder=\"What's on your mind?\"\r\n      />\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"Nweet\" />\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"50px\" height=\"50px\" alt=\"attachment\" />\r\n          <button onClick={onClearAttachment}>Clear</button>\r\n        </div>\r\n      )}\r\n      {/* attachment가 존재하는 경우만 이미지 출력 */}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NweetFactory\r\n","import Nweet from \"components/Nweet\";\r\nimport NweetFactory from \"components/NweetFactory\";\r\nimport { dbService } from \"fBase\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]); //nweets array from db\r\n\r\n  // const getNweets = async () => {\r\n  //   //get documents from 'nweets'collections\r\n  //   const dbNweets = await dbService.collection(\"nweets\").get(); //get all info of 'nweet'collection\r\n  //   dbNweets.forEach((document) => {\r\n  //     const nweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setNweets((prev) => [nweetObject, ...prev]); //make an array of documents.datas\r\n  //   });\r\n\r\n  // };\r\n\r\n  useEffect(() => {\r\n    //Listening to DB on real time\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        // getNweets()대신 snapShot사용, realtime으로 db 정보 가져올 수 있음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n\r\n\r\n  return (\r\n      <div>\r\n        <NweetFactory userObj={userObj} />\r\n        {nweets.map((nweet) => {\r\n          return (\r\n            <Nweet\r\n              key={nweet.id}\r\n              nweetObj={nweet}\r\n              isOwner={nweet.creatorId === userObj.uid}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n  );\r\n};\r\nexport default Home;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Navigation({ userObj }) {\r\nconsole.log(userObj);\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>\r\n                    <Link to='/'>Home</Link>\r\n                </li>\r\n                <li>\r\n                    <Link to='/profile'>{userObj.displayName} Profile</Link>\r\n                </li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation\r\n","import { authService } from \"fBase\";\r\nimport React, {useState} from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  //sign out\r\n  const onSignOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n//   const getMyNweets = async() => {\r\n//     const myNweets = await dbService\r\n//       .collection(\"nweets\")\r\n//       .where(\"creatorId\", \"==\", userObj.uid)\r\n//       .orderBy(\"createdAt\")\r\n//       .get(); \r\n//     console.log(myNweets.docs.map((doc) => doc.data()));\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     getMyNweets();\r\n//   }, []);\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmitHandler = async(event) => {\r\n      event.preventDefault();\r\n      if(userObj.displayName !== newDisplayName){\r\n        await userObj.updateProfile({\r\n            displayName: newDisplayName,\r\n        });\r\n        refreshUser();\r\n      }\r\n  }\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Display your name\"\r\n          required\r\n          value={newDisplayName}\r\n          onChange={onTextChange}\r\n        />\r\n        <input type=\"submit\" value=\"Update Name\" />\r\n      </form>\r\n      <button onClick={onSignOutClick}>Sign out</button>\r\n    </>\r\n  );\r\n};\r\nexport default Profile;","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\nimport Navigation from \"components/Navigation\";\r\nimport Profile from \"routes/Profile\";\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  //   Router가 Routes를 보여주는 용도로만 사용되기 위해 state 이동 -> App.js\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj}/>}\r\n      {/* A && B : B를 실행하기 위해선 A가 TRUE여야 한다. */}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj}/>\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser}/>\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fBase\";\n\n// App.js 가 모든 로직들을 다룰 예정\nfunction App() {\n  // authService.currentUser : 현재 로그인 한 유저를 가리키나, 실제로 firebase를 통해 로그인/로그아웃한 지는 알 수 없다.\n  \n  const [init, setInit] = useState(false); // 초기화 상태\n  const [userObj, setUserObj] = useState(null); //유저 정보를 가지는 상태\n\n  //onAuthStateChanged : 사용자의 로그인 상태를 관찰하는 관찰자를 추가해줌\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) { //로그인한 유저 정보를 저장\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        }); \n      } else{ //로그아웃\n        setUserObj(null); \n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    //setUserObj(authService.currentUser); //Not Working! but {displayName: \"asdf\"}는 작동함.\n    //authService.currentUser가 너무 커서 바꾸ㅟ넋을 판단하기가 어렵다.\n    //option1. authService.currentUser object의 크기를 줄여준다.\n    //useEffect에서 setUserObj할때 첨부터 크기가 큰 user를 다 데려오는게 아니라 필요한 것만 데려오기.\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n    // option2 빈 {}안에 원래 user의 사본이 새 {}형태로 생성되는데 이 덕에 react가 새로운 {}가 생성됐네! 하고 재렌더링해줌\n    /* 하지만 오류 발생할 수 있음\n    setUserObj(Object.assign({}, user));\n    */\n  };\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer>\n        &copy; {new Date().getFullYear()} Nwitter - nomardcoders.com\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}