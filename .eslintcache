[{"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\index.js":"1","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\App.js":"2","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Auth.js":"4","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Home.js":"5","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\fBase.js":"6","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Navigation.js":"7","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Nweet.js":"9"},{"size":207,"mtime":1610353350562,"results":"10","hashOfConfig":"11"},{"size":1108,"mtime":1610678712351,"results":"12","hashOfConfig":"11"},{"size":1001,"mtime":1610888041323,"results":"13","hashOfConfig":"11"},{"size":2879,"mtime":1610501533264,"results":"14","hashOfConfig":"11"},{"size":3641,"mtime":1610929366227,"results":"15","hashOfConfig":"11"},{"size":729,"mtime":1610689977380,"results":"16","hashOfConfig":"11"},{"size":411,"mtime":1610506477462,"results":"17","hashOfConfig":"11"},{"size":697,"mtime":1610929475196,"results":"18","hashOfConfig":"11"},{"size":2079,"mtime":1610697286996,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ho3ghr",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\index.js",[],["41","42"],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\App.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Router.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Auth.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Home.js",["43"],"import Nweet from \"components/Nweet\";\r\nimport {v4 as uuidv4} from \"uuid\";\r\nimport { dbService, storageService } from \"fBase\";\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweet, setNweet] = useState(\"\"); //only for the form\r\n  const [nweets, setNweets] = useState([]); //nweets array from db\r\n  const [attachment, setAttachment] = useState();\r\n\r\n  // const getNweets = async () => {\r\n  //   //get documents from 'nweets'collections\r\n  //   const dbNweets = await dbService.collection(\"nweets\").get(); //get all info of 'nweet'collection\r\n  //   dbNweets.forEach((document) => {\r\n  //     const nweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setNweets((prev) => [nweetObject, ...prev]); //make an array of documents.datas\r\n  //   });\r\n\r\n  // };\r\n\r\n  useEffect(() => {\r\n    //Listening to DB on real time\r\n    dbService.collection(\"nweets\").onSnapshot((snapshot) => {\r\n      const nweetArray = snapshot.docs.map((doc) => ({\r\n        // getNweets()대신 snapShot사용, realtime으로 db 정보 가져올 수 있음\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setNweets(nweetArray);\r\n    });\r\n  }, []);\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  };\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentURL = \"\";\r\n\r\n    if(attachment !== \"\") {\r\n      // Upload Image\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`); //child: 이미지의 path - folder\r\n      const response = await attachmentRef.putString(attachment, \"data_url\"); //.putString(data, data format)\r\n      attachmentURL = await response.ref.getDownloadURL();\r\n    };\r\n\r\n    const nweetObj = {\r\n        text: nweet,\r\n        createdAt: Date.now(),\r\n        creatorId: userObj.uid,\r\n        attachmentURL,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    \r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent; //finishedEvent.currentTarget.result 값을 ES6로 표현한 것\r\n      setAttachment(result);\r\n    };\r\n\r\n    if(files.lenght > 0) { //오류 수정 -> 파일선택하려다 취소한 경우\r\n      const theFile = files[0];\r\n      reader.readAsDataURL(theFile); \r\n    }    \r\n    \r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={onSubmitHandler}>\r\n        <input\r\n          type=\"text\"\r\n          value={nweet}\r\n          onChange={onTextChange}\r\n          placeholder=\"What's on your mind?\"\r\n        />\r\n        <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n        <input type=\"submit\" value=\"Nweet\" />\r\n        {attachment && (\r\n          <div>\r\n            <img src={attachment} width=\"50px\" height=\"50px\" />\r\n            <button onClick={onClearAttachment}>Clear</button>\r\n          </div>\r\n        )}\r\n        {/* attachment가 존재하는 경우만 이미지 출력 */}\r\n      </form>\r\n      <div>\r\n        {nweets.map((nweet) => {\r\n          return (\r\n            <Nweet\r\n              key={nweet.id}\r\n              nweetObj={nweet}\r\n              isOwner={nweet.creatorId === userObj.uid}\r\n            />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Home;\r\n","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\fBase.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Profile.js",["44"],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Nweet.js",["45"],"import { dbService, storageService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction Nweet({ nweetObj, isOwner }) {\r\n  const [isEditing, setIsEditing] = useState(false); //Is editing or not\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //수정될 nweet\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete(); //id를 알고 있기 때문에 가능./\r\n      await storageService.refFromURL(nweetObj.attachmentURL).delete(); //Delete file\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setIsEditing((prev) => !prev);\r\n  };\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  const onSubmitHandler = async(e) => {\r\n    e.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {isEditing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmitHandler}>\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={onTextChange}\r\n                  required\r\n                  placeholder=\"당신의 Nweet을 수정하세요.\"\r\n                  value={newNweet}\r\n                />\r\n                <input type=\"submit\" value=\"Nwee 수정\" />\r\n              </form>\r\n              <button onClick={toggleEditing}>취소</button>{\" \"}\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          {\" \"}\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentURL && (\r\n            <img src={nweetObj.attachmentURL} width=\"50px\" height=\"50px\" />\r\n          )}\r\n          {isOwner && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete</button>\r\n              <button onClick={toggleEditing}>Edit</button>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nweet;\r\n",{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","severity":1,"message":"51","line":106,"column":13,"nodeType":"52","endLine":106,"endColumn":64},{"ruleId":"53","severity":1,"message":"54","line":21,"column":6,"nodeType":"55","endLine":21,"endColumn":8,"suggestions":"56"},{"ruleId":"50","severity":1,"message":"51","line":60,"column":13,"nodeType":"52","endLine":60,"endColumn":76},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyNweets'. Either include it or remove the dependency array.","ArrayExpression",["59"],"no-global-assign","no-unsafe-negation",{"desc":"60","fix":"61"},"Update the dependencies array to be: [getMyNweets]",{"range":"62","text":"63"},[570,572],"[getMyNweets]"]