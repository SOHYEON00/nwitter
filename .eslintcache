[{"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\index.js":"1","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\App.js":"2","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Router.js":"3","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Auth.js":"4","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Home.js":"5","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\fBase.js":"6","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Navigation.js":"7","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Profile.js":"8","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Nweet.js":"9","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\NweetFactory.js":"10","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\AuthForm.js":"11","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\ProfileForm.js":"12","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\FileUpload.js":"13"},{"size":233,"mtime":1611022186571,"results":"14","hashOfConfig":"15"},{"size":2318,"mtime":1611215631438,"results":"16","hashOfConfig":"15"},{"size":1120,"mtime":1611045251898,"results":"17","hashOfConfig":"15"},{"size":1561,"mtime":1611042125350,"results":"18","hashOfConfig":"15"},{"size":1391,"mtime":1611214429159,"results":"19","hashOfConfig":"15"},{"size":729,"mtime":1610689977380,"results":"20","hashOfConfig":"15"},{"size":1639,"mtime":1611247271540,"results":"21","hashOfConfig":"15"},{"size":605,"mtime":1611149346416,"results":"22","hashOfConfig":"15"},{"size":2575,"mtime":1611208483688,"results":"23","hashOfConfig":"15"},{"size":2924,"mtime":1611152837934,"results":"24","hashOfConfig":"15"},{"size":2446,"mtime":1611020822065,"results":"25","hashOfConfig":"15"},{"size":3238,"mtime":1611217907603,"results":"26","hashOfConfig":"15"},{"size":607,"mtime":1611152087119,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"ho3ghr",{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\index.js",[],["60","61"],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\App.js",["62"],"import React, { useState, useEffect } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService, dbService } from \"fBase\";\n\n// App.js 가 모든 로직들을 다룰 예정\nfunction App() {\n  // authService.currentUser : 현재 로그인 한 유저를 가리키나, 실제로 firebase를 통해 로그인/로그아웃한 지는 알 수 없다.\n\n  const [init, setInit] = useState(false); // 초기화 상태\n  const [userObj, setUserObj] = useState(null); //유저 정보를 가지는 상태\n\n  //onAuthStateChanged : 사용자의 로그인 상태를 관찰하는 관찰자를 추가해줌\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        //로그인한 유저 정보를 저장\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          photoUrl: user.photoUrl,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        //로그아웃\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    //setUserObj(authService.currentUser); //Not Working! but {displayName: \"asdf\"}는 작동함.\n    //authService.currentUser가 너무 커서 바꾸ㅟ넋을 판단하기가 어렵다.\n    //option1. authService.currentUser object의 크기를 줄여준다.\n    //useEffect에서 setUserObj할때 첨부터 크기가 큰 user를 다 데려오는게 아니라 필요한 것만 데려오기.\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      photoUrl: user.photoUrl,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n\n    // option2 빈 {}안에 원래 user의 사본이 새 {}형태로 생성되는데 이 덕에 react가 새로운 {}가 생성됐네! 하고 재렌더링해줌\n    /* 하지만 오류 발생할 수 있음\n    setUserObj(Object.assign({}, user));\n    */\n  };\n\n  return (\n    <div className=\"App\">\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObj)}\n          userObj={userObj}\n        />\n      ) : (\n        \"Initializing...\"\n      )}\n      <footer>\n        &copy; {new Date().getFullYear()} Nwitter - nomardcoders.com\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Router.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Auth.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Home.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\fBase.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Navigation.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\routes\\Profile.js",["63"],"import ProfileForm from \"components/ProfileForm\";\r\nimport { authService } from \"fBase\";\r\nimport React from \"react\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n\r\n  //sign out\r\n  const onSignOutClick = () => {\r\n    authService.signOut();\r\n    history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"profileContainer\">\r\n      <ProfileForm refreshUser={refreshUser} userObj={userObj}/>\r\n      <span className=\"formBtn cancelBtn\" onClick={onSignOutClick}>Sign Out </span>\r\n    </div>\r\n  );\r\n};\r\nexport default Profile;","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\Nweet.js",["64","65"],"import { dbService, storageService } from \"fBase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Nweet({ nweetObj, isOwner }) {\r\n  const [isEditing, setIsEditing] = useState(false); //Is editing or not\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text); //수정될 nweet\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"정말 삭제하시겠습니까?\");\r\n    if (ok) {\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete(); //id를 알고 있기 때문에 가능./\r\n      await storageService.refFromURL(nweetObj.attachmentURL).delete(); //Delete file\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => {\r\n    setIsEditing((prev) => !prev);\r\n  };\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  const onSubmitHandler = async(e) => {\r\n    e.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({\r\n      text: newNweet,\r\n    });\r\n    setIsEditing(false);\r\n  };\r\n\r\n  return (\r\n    <article className=\"nweet\">\r\n      {isEditing ? (\r\n        <>\r\n          {isOwner && (\r\n            <>\r\n              <form onSubmit={onSubmitHandler} className=\"container nweetEdit\">\r\n                <input\r\n                  type=\"text\"\r\n                  onChange={onTextChange}\r\n                  required\r\n                  autoFocus\r\n                  placeholder=\"당신의 Nweet을 수정하세요.\"\r\n                  value={newNweet}\r\n                  className=\"formInput\"\r\n                />\r\n                <input type=\"submit\" value=\"Nweet 수정\" className=\"formBtn\"/>\r\n              </form>\r\n              <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n                Cancel\r\n              </span>\r\n            </>\r\n          )}\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h2></h2>\r\n          <h4>{nweetObj.text}</h4>\r\n          {nweetObj.attachmentURL && <img src={nweetObj.attachmentURL} />}\r\n          {isOwner && (\r\n            <>\r\n              <div className=\"nweet_actions\">\r\n                <span onClick={onDeleteClick}>\r\n                  <FontAwesomeIcon icon={faTrash}/>\r\n                </span>\r\n                <span onClick={toggleEditing}>\r\n                  <FontAwesomeIcon icon={faPencilAlt} />\r\n                </span>\r\n              </div>\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </article>\r\n  );\r\n}\r\n\r\nexport default Nweet;\r\n","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\NweetFactory.js",["66","67"],"import React, {useState} from 'react';\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport { dbService, storageService } from \"fBase\";\r\nimport FileUpload from './FileUpload';\r\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nfunction NweetFactory({ userObj }) {\r\n    const [nweet, setNweet] = useState(\"\"); //only for the form\r\n    const [attachment, setAttachment] = useState(\"\");\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentURL = \"\";\r\n\r\n    if (nweet === \"\") {\r\n      return;\r\n    }\r\n\r\n    if (attachment !== \"\") {\r\n      // Upload Image\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`); //child: 이미지의 path - folder\r\n      const response = await attachmentRef.putString(attachment, \"data_url\"); //.putString(data, data format)\r\n      attachmentURL = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      attachmentURL,\r\n    };\r\n    await dbService.collection(\"nweets\").add(nweetObj);\r\n\r\n    setNweet(\"\");\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNweet(value);\r\n  }\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const theFile = files[0];\r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent; //finishedEvent.currentTarget.result 값을 ES6로 표현한 것\r\n      setAttachment(result);\r\n    };\r\n\r\n    // if (files.lenght > 0) {\r\n    //   //오류 수정 -> 파일선택하려다 취소한 경우\r\n    //   const theFile = files[0];\r\n      reader.readAsDataURL(theFile);\r\n    // }\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setAttachment(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} className=\"factoryForm\">\r\n      <div className=\"factoryInput_container\">\r\n        <input\r\n          className=\"factoryInput_input\"\r\n          value={nweet}\r\n          onChange={onTextChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n          />\r\n          <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput_arrow\"/>\r\n      </div>\r\n      <FileUpload onFileChange={onFileChange}/>\r\n      {attachment && (\r\n          <div className=\"factoryForm_attachment\">\r\n            <img src={attachment} style={{ backgroundImage: attachment }} />\r\n            <div className=\"factoryForm_clear\" onClick={onClearAttachment}>\r\n              <span>Remove</span>\r\n              <FontAwesomeIcon icon={faTimes} />\r\n            </div>\r\n          </div>\r\n        )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default NweetFactory\r\n","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\AuthForm.js",[],"C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\ProfileForm.js",["68"],"import React, { useState, useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimes } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { storageService } from \"fBase\";\r\nimport FileUpload from \"components/FileUpload\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction ProfileForm({ refreshUser, userObj }) {\r\n  const history = useHistory();\r\n  const [originProfile, setOriginProfile] = useState(\"\"); //storage에서 받아온 사진 변수\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const [newPhoto, setNewPhoto] = useState(\"\"); //새로 업로드한 사진 변수\r\n\r\n  const getUrl = async() => {\r\n    const attachmentRef = storageService\r\n      .ref()\r\n      .child(`${userObj.uid}/userPhoto`); \r\n    await attachmentRef\r\n    .getDownloadURL().then((url) => {\r\n      setOriginProfile(url);\r\n      setNewPhoto(url);\r\n    });\r\n  } \r\n\r\n  useEffect(() => {\r\n    getUrl();\r\n  }, []);\r\n\r\n  const onTextChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const reader = new FileReader();\r\n\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent; //finishedEvent.currentTarget.result 값을 ES6로 표현한 것\r\n      setNewPhoto(result);\r\n    };\r\n\r\n    if (files.length > 0) {\r\n      //오류 수정 -> 파일선택하려다 취소한 경우\r\n      const theFile = files[0];\r\n      reader.readAsDataURL(theFile);\r\n    }\r\n  };\r\n\r\n  const onSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n\r\n    //FIND -> UPDATE USER INFO\r\n    if (newPhoto !== originProfile) {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/userPhoto`);\r\n      await attachmentRef.putString(newPhoto, \"data_url\");\r\n    }\r\n\r\n    \r\n    alert(\"프로필이 성공적으로 업데이트 되었습니다.\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const onClearAttachment = () => {\r\n    setNewPhoto(originProfile); //원래 사진으로 변경\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={onSubmitHandler} className=\"profileForm\">\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Display your name\"\r\n        autoFocus\r\n        required\r\n        value={newDisplayName}\r\n        onChange={onTextChange}\r\n        className=\"formInput\"\r\n      />\r\n      {newPhoto ? (\r\n        <img src={newPhoto} alt=\"profile_photo\" width=\"300\" id=\"profilePhoto\"/>\r\n      ) : (\r\n        <h3>프로필 사진을 추가해주세요.</h3>\r\n      )}\r\n\r\n      <FileUpload onFileChange={onFileChange} />\r\n\r\n      {newPhoto !== originProfile && (\r\n        <div className=\"factoryForm_clear\" onClick={onClearAttachment}>\r\n          <span>Remove</span>\r\n          <FontAwesomeIcon icon={faTimes} />\r\n        </div>\r\n      )}\r\n\r\n      <input type=\"submit\" value=\"Update Profile\" className=\"formBtn\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ProfileForm;\r\n","C:\\Users\\lg\\Documents\\2021\\nwitter\\src\\components\\FileUpload.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":3,"column":23,"nodeType":"75","messageId":"76","endLine":3,"endColumn":32},{"ruleId":"73","severity":1,"message":"77","line":3,"column":16,"nodeType":"75","messageId":"76","endLine":3,"endColumn":24},{"ruleId":"78","severity":1,"message":"79","line":63,"column":11,"nodeType":"80","endLine":63,"endColumn":15},{"ruleId":"81","severity":1,"message":"82","line":65,"column":38,"nodeType":"80","endLine":65,"endColumn":74},{"ruleId":"73","severity":1,"message":"83","line":5,"column":10,"nodeType":"75","messageId":"76","endLine":5,"endColumn":16},{"ruleId":"81","severity":1,"message":"82","line":69,"column":13,"nodeType":"80","endLine":69,"endColumn":77},{"ruleId":"84","severity":1,"message":"85","line":27,"column":6,"nodeType":"86","endLine":27,"endColumn":8,"suggestions":"87"},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"no-unused-vars","'dbService' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'faPlus' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getUrl'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [getUrl]",{"range":"93","text":"94"},[939,941],"[getUrl]"]